package com.justeat.mickeydb.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.justeat.mickeydb.ContentUriInfo;
import com.justeat.mickeydb.MickeyDatabaseModel;
import com.justeat.mickeydb.ModelUtil;
import com.justeat.mickeydb.Strings;
import com.justeat.mickeydb.generator.SqliteDatabaseSnapshot;
import com.justeat.mickeydb.mickeyLang.ActionStatement;
import com.justeat.mickeydb.mickeyLang.ColumnSource;
import com.justeat.mickeydb.mickeyLang.ColumnType;
import com.justeat.mickeydb.mickeyLang.ContentNotificationUri;
import com.justeat.mickeydb.mickeyLang.ContentUri;
import com.justeat.mickeydb.mickeyLang.ContentUriParamSegment;
import com.justeat.mickeydb.mickeyLang.ContentUriQueryParam;
import com.justeat.mickeydb.mickeyLang.ContentUriSegment;
import com.justeat.mickeydb.mickeyLang.NotifyContentUri;
import com.justeat.mickeydb.mickeyLang.NotifyContentUriParamSegment;
import com.justeat.mickeydb.mickeyLang.NotifyContentUriSegment;
import com.justeat.mickeydb.mickeyLang.TableDefinition;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Pair;

@SuppressWarnings("all")
public class CustomActionsGenerator {
  public CharSequence generate(final MickeyDatabaseModel model, final ContentUriInfo content) {
    StringConcatenation _builder = new StringConcatenation();
    SqliteDatabaseSnapshot snapshot = model.getSnapshot();
    _builder.newLineIfNotEmpty();
    boolean _and = false;
    ActionStatement _action = content.getAction();
    boolean _notEquals = (!Objects.equal(_action, null));
    if (!_notEquals) {
      _and = false;
    } else {
      ActionStatement _action_1 = content.getAction();
      ContentUri _uri = _action_1.getUri();
      EList<ContentUriSegment> _segments = _uri.getSegments();
      final Function1<ContentUriSegment, Boolean> _function = new Function1<ContentUriSegment, Boolean>() {
        public Boolean apply(final ContentUriSegment it) {
          return Boolean.valueOf((it instanceof ContentUriParamSegment));
        }
      };
      Iterable<ContentUriSegment> _filter = IterableExtensions.<ContentUriSegment>filter(_segments, _function);
      boolean _isEmpty = IterableExtensions.isEmpty(_filter);
      boolean _not = (!_isEmpty);
      _and = _not;
    }
    boolean hasSlugParams = _and;
    _builder.newLineIfNotEmpty();
    boolean _and_1 = false;
    ActionStatement _action_2 = content.getAction();
    boolean _notEquals_1 = (!Objects.equal(_action_2, null));
    if (!_notEquals_1) {
      _and_1 = false;
    } else {
      ActionStatement _action_3 = content.getAction();
      EList<ContentUriQueryParam> _params = _action_3.getParams();
      boolean _isEmpty_1 = _params.isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      _and_1 = _not_1;
    }
    boolean hasQueryParams = _and_1;
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by Mickey DB");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package ");
    String _packageName = model.getPackageName();
    _builder.append(_packageName, "");
    _builder.append(".actions;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.justeat.mickeydb.ActiveRecordFactory;");
    _builder.newLine();
    _builder.append("import android.content.ContentValues;");
    _builder.newLine();
    _builder.append("import android.database.sqlite.SQLiteDatabase;");
    _builder.newLine();
    _builder.append("import android.net.Uri;");
    _builder.newLine();
    _builder.append("import com.justeat.mickeydb.CustomActions;");
    _builder.newLine();
    _builder.append("import com.justeat.mickeydb.MickeyContentProvider;");
    _builder.newLine();
    _builder.append("import com.justeat.mickeydb.Query;");
    _builder.newLine();
    _builder.append("import ");
    String _packageName_1 = model.getPackageName();
    _builder.append(_packageName_1, "");
    _builder.append(".");
    String _databaseName = model.getDatabaseName();
    _builder.append(_databaseName, "");
    _builder.append("Contract;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _packageName_2 = model.getPackageName();
    _builder.append(_packageName_2, "");
    _builder.append(".");
    String _databaseName_1 = model.getDatabaseName();
    _builder.append(_databaseName_1, "");
    _builder.append("Contract.");
    String _type = content.getType();
    String _pascalize = Strings.pascalize(_type);
    _builder.append(_pascalize, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _packageName_3 = model.getPackageName();
    _builder.append(_packageName_3, "");
    _builder.append(".Abstract");
    String _databaseName_2 = model.getDatabaseName();
    _builder.append(_databaseName_2, "");
    _builder.append("OpenHelper.Sources;");
    _builder.newLineIfNotEmpty();
    {
      boolean _isSupportsActiveRecord = content.isSupportsActiveRecord();
      if (_isSupportsActiveRecord) {
        _builder.append("import ");
        String _packageName_4 = model.getPackageName();
        _builder.append(_packageName_4, "");
        _builder.append(".");
        String _type_1 = content.getType();
        String _pascalize_1 = Strings.pascalize(_type_1);
        _builder.append(_pascalize_1, "");
        _builder.append("Record;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import java.util.List;");
    _builder.newLine();
    {
      ActionStatement _action_4 = content.getAction();
      EList<ContentNotificationUri> _notifications = null;
      if (_action_4!=null) {
        _notifications=_action_4.getNotifications();
      }
      int _size = 0;
      if (_notifications!=null) {
        _size=_notifications.size();
      }
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("import java.util.ArrayList;");
        _builder.newLine();
      }
    }
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.append("import com.justeat.mickeydb.util.Uris;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = content.getName();
    String _pascalize_2 = Strings.pascalize(_name);
    _builder.append(_pascalize_2, "");
    _builder.append("Actions extends CustomActions {");
    _builder.newLineIfNotEmpty();
    {
      boolean _or = false;
      if ((hasQueryParams || hasSlugParams)) {
        _or = true;
      } else {
        boolean _and_2 = false;
        boolean _isDirectory = content.isDirectory();
        boolean _not_2 = (!_isDirectory);
        if (!_not_2) {
          _and_2 = false;
        } else {
          boolean _isSupportsActiveRecord_1 = content.isSupportsActiveRecord();
          _and_2 = _isSupportsActiveRecord_1;
        }
        _or = _and_2;
      }
      if (_or) {
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void addQueryExpressionsFromUriSegmentParams(Uri uri, Query query) {");
        _builder.newLine();
        {
          boolean _isUserDefined = content.isUserDefined();
          if (_isUserDefined) {
            {
              if (hasSlugParams) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("List<String> segments = uri.getPathSegments();");
                _builder.newLine();
              }
            }
            {
              if (hasQueryParams) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("Set<String> queryKeys = Uris.getQueryParameterNames(uri);");
                _builder.newLine();
              }
            }
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _createSlugVariables = this.createSlugVariables(content);
            _builder.append(_createSlugVariables, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _createQueryParamVariables = this.createQueryParamVariables(content);
            _builder.append(_createQueryParamVariables, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _createQueryStatements = this.createQueryStatements(content);
            _builder.append(_createQueryStatements, "\t\t");
            _builder.newLineIfNotEmpty();
          } else {
            {
              boolean _and_3 = false;
              boolean _isDirectory_1 = content.isDirectory();
              boolean _not_3 = (!_isDirectory_1);
              if (!_not_3) {
                _and_3 = false;
              } else {
                boolean _isSupportsActiveRecord_2 = content.isSupportsActiveRecord();
                _and_3 = _isSupportsActiveRecord_2;
              }
              if (_and_3) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("List<String> segments = uri.getPathSegments();");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("long _idSlug = Long.parseLong(segments.get(1));");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("query.expr(");
                String _type_2 = content.getType();
                String _pascalize_3 = Strings.pascalize(_type_2);
                _builder.append(_pascalize_3, "\t\t");
                _builder.append("._ID, Query.Op.EQ, _idSlug);");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getSourceName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Sources.");
    String _type_3 = content.getType();
    String _underscore = Strings.underscore(_type_3);
    String _upperCase = _underscore.toUpperCase();
    _builder.append(_upperCase, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ActiveRecordFactory<?> getActiveRecordFactory() {");
    _builder.newLine();
    {
      boolean _isSupportsActiveRecord_3 = content.isSupportsActiveRecord();
      if (_isSupportsActiveRecord_3) {
        _builder.append("\t\t");
        _builder.append("return ");
        String _type_4 = content.getType();
        String _pascalize_4 = Strings.pascalize(_type_4);
        _builder.append(_pascalize_4, "\t\t");
        _builder.append("Record.getFactory();");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t\t");
        _builder.append("throw new RuntimeException(\"");
        String _type_5 = content.getType();
        _builder.append(_type_5, "\t\t");
        _builder.append(" does not support active record, you may need to add an _id to that table\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<Uri> getNotifyUris(MickeyContentProvider provider, Uri uri) {");
    _builder.newLine();
    {
      ActionStatement _action_5 = content.getAction();
      EList<ContentNotificationUri> _notifications_1 = null;
      if (_action_5!=null) {
        _notifications_1=_action_5.getNotifications();
      }
      int _size_1 = 0;
      if (_notifications_1!=null) {
        _size_1=_notifications_1.size();
      }
      boolean _greaterThan_1 = (_size_1 > 0);
      if (_greaterThan_1) {
        _builder.append("\t\t");
        _builder.append("List<Uri> notifyUris = new ArrayList<>();");
        _builder.newLine();
        {
          if (hasSlugParams) {
            _builder.append("\t\t");
            _builder.append("List<String> segments = uri.getPathSegments();");
            _builder.newLine();
            _builder.append("\t\t");
            CharSequence _createStringSlugVariables = this.createStringSlugVariables(content);
            _builder.append(_createStringSlugVariables, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          ActionStatement _action_6 = content.getAction();
          EList<ContentNotificationUri> _notifications_2 = _action_6.getNotifications();
          for(final ContentNotificationUri notificationUri : _notifications_2) {
            _builder.append("\t\t");
            _builder.append("notifyUris.add(");
            CharSequence _createNotifyStatement = this.createNotifyStatement(model, content, notificationUri);
            _builder.append(_createNotifyStatement, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("return notifyUris;");
        _builder.newLine();
      } else {
        _builder.append("\t\t");
        _builder.append("return null;");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      if (hasSlugParams) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void addContentValuesFromUri(MickeyContentProvider provider, Uri uri, ContentValues values) {");
        _builder.newLine();
        {
          ActionStatement _action_7 = content.getAction();
          boolean _notEquals_2 = (!Objects.equal(_action_7, null));
          if (_notEquals_2) {
            {
              if (hasSlugParams) {
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("List<String> segments = uri.getPathSegments();");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                CharSequence _createSlugVariables_1 = this.createSlugVariables(content);
                _builder.append(_createSlugVariables_1, "\t\t");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              ActionStatement _action_8 = content.getAction();
              ContentUri _uri_1 = _action_8.getUri();
              EList<ContentUriSegment> _segments_1 = _uri_1.getSegments();
              for(final ContentUriSegment seg : _segments_1) {
                {
                  if ((seg instanceof ContentUriParamSegment)) {
                    _builder.append("\t");
                    _builder.append("\t");
                    ContentUriParamSegment paramSeg = ((ContentUriParamSegment) seg);
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("values.put(");
                    ActionStatement _action_9 = content.getAction();
                    TableDefinition _type_6 = _action_9.getType();
                    String _name_1 = _type_6.getName();
                    String _pascalize_5 = Strings.pascalize(_name_1);
                    _builder.append(_pascalize_5, "\t\t");
                    _builder.append(".");
                    ColumnSource _param = paramSeg.getParam();
                    String _name_2 = _param.getName();
                    String _underscore_1 = Strings.underscore(_name_2);
                    String _upperCase_1 = _underscore_1.toUpperCase();
                    _builder.append(_upperCase_1, "\t\t");
                    _builder.append(", ");
                    ColumnSource _param_1 = paramSeg.getParam();
                    String _name_3 = _param_1.getName();
                    String _camelize = Strings.camelize(_name_3);
                    _builder.append(_camelize, "\t\t");
                    _builder.append("Slug);");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence createNotifyStatement(final MickeyDatabaseModel model, final ContentUriInfo info, final ContentNotificationUri uri) {
    StringConcatenation _builder = new StringConcatenation();
    String _databaseName = model.getDatabaseName();
    _builder.append(_databaseName, "");
    _builder.append("Contract.BASE_CONTENT_URI");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(".buildUpon()");
    _builder.newLine();
    {
      NotifyContentUri _uri = uri.getUri();
      EList<NotifyContentUriSegment> _segments = _uri.getSegments();
      for(final NotifyContentUriSegment seg : _segments) {
        {
          if ((seg instanceof NotifyContentUriParamSegment)) {
            _builder.append("\t");
            _builder.append(".appendPath(");
            String _slugVariableForNotifyUriSegment = this.getSlugVariableForNotifyUriSegment(((NotifyContentUriSegment) seg), info);
            _builder.append(_slugVariableForNotifyUriSegment, "\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append(".appendPath(\"");
            String _name = seg.getName();
            _builder.append(_name, "\t");
            _builder.append("\")");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append(".build()");
    _builder.newLine();
    return _builder;
  }
  
  public String getSlugVariableForNotifyUriSegment(final NotifyContentUriSegment segment, final ContentUriInfo info) {
    ActionStatement _action = info.getAction();
    ContentUri _uri = _action.getUri();
    EList<ContentUriSegment> _segments = _uri.getSegments();
    final Function1<ContentUriSegment, Boolean> _function = new Function1<ContentUriSegment, Boolean>() {
      public Boolean apply(final ContentUriSegment it) {
        boolean _and = false;
        if (!(it instanceof ContentUriParamSegment)) {
          _and = false;
        } else {
          String _name = segment.getName();
          ColumnSource _param = ((ContentUriParamSegment) it).getParam();
          String _name_1 = _param.getName();
          boolean _equals = _name.equals(_name_1);
          _and = _equals;
        }
        return Boolean.valueOf(_and);
      }
    };
    boolean _exists = IterableExtensions.<ContentUriSegment>exists(_segments, _function);
    if (_exists) {
      String _name = segment.getName();
      String _camelize = Strings.camelize(_name);
      return (_camelize + "Slug");
    } else {
      return "\"NO-MATCH\"";
    }
  }
  
  public CharSequence createQueryStatements(final ContentUriInfo content) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ActionStatement _action = content.getAction();
      ContentUri _uri = _action.getUri();
      EList<ContentUriSegment> _segments = _uri.getSegments();
      Iterable<Pair<Integer, ContentUriSegment>> _indexed = IterableExtensions.<ContentUriSegment>indexed(_segments);
      for(final Pair<Integer, ContentUriSegment> entry : _indexed) {
        _builder.newLineIfNotEmpty();
        {
          ContentUriSegment _value = entry.getValue();
          if ((_value instanceof ContentUriParamSegment)) {
            ContentUriSegment _value_1 = entry.getValue();
            ContentUriParamSegment param = ((ContentUriParamSegment) _value_1);
            _builder.newLineIfNotEmpty();
            {
              ColumnSource _param = param.getParam();
              ColumnType _inferredColumnType = ModelUtil.getInferredColumnType(_param);
              boolean _notEquals = (!Objects.equal(_inferredColumnType, ColumnType.TEXT));
              if (_notEquals) {
                _builder.append("query.expr(");
                String _type = content.getType();
                String _pascalize = Strings.pascalize(_type);
                _builder.append(_pascalize, "");
                _builder.append(".");
                ColumnSource _param_1 = param.getParam();
                String _name = _param_1.getName();
                String _underscore = Strings.underscore(_name);
                String _upperCase = _underscore.toUpperCase();
                _builder.append(_upperCase, "");
                _builder.append(", Query.Op.EQ, ");
                ColumnSource _param_2 = param.getParam();
                String _name_1 = _param_2.getName();
                String _camelize = Strings.camelize(_name_1);
                _builder.append(_camelize, "");
                _builder.append("Slug);");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("query.expr(\"cast(\" + ");
                String _type_1 = content.getType();
                String _pascalize_1 = Strings.pascalize(_type_1);
                _builder.append(_pascalize_1, "");
                _builder.append(".");
                ColumnSource _param_3 = param.getParam();
                String _name_2 = _param_3.getName();
                String _underscore_1 = Strings.underscore(_name_2);
                String _upperCase_1 = _underscore_1.toUpperCase();
                _builder.append(_upperCase_1, "");
                _builder.append(" + \" as text)\", Query.Op.EQ, ");
                ColumnSource _param_4 = param.getParam();
                String _name_3 = _param_4.getName();
                String _camelize_1 = Strings.camelize(_name_3);
                _builder.append(_camelize_1, "");
                _builder.append("Slug);");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      ActionStatement _action_1 = content.getAction();
      EList<ContentUriQueryParam> _params = _action_1.getParams();
      for(final ContentUriQueryParam queryParam : _params) {
        _builder.append("\t");
        _builder.append("if(queryKeys.contains(");
        String _type_2 = content.getType();
        String _pascalize_2 = Strings.pascalize(_type_2);
        _builder.append(_pascalize_2, "\t");
        _builder.append(".");
        ColumnSource _column = queryParam.getColumn();
        String _name_4 = _column.getName();
        String _underscore_2 = Strings.underscore(_name_4);
        String _upperCase_2 = _underscore_2.toUpperCase();
        _builder.append(_upperCase_2, "\t");
        _builder.append(")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("query.expr(");
        String _type_3 = content.getType();
        String _pascalize_3 = Strings.pascalize(_type_3);
        _builder.append(_pascalize_3, "\t\t");
        _builder.append(".");
        ColumnSource _column_1 = queryParam.getColumn();
        String _name_5 = _column_1.getName();
        String _underscore_3 = Strings.underscore(_name_5);
        String _upperCase_3 = _underscore_3.toUpperCase();
        _builder.append(_upperCase_3, "\t\t");
        _builder.append(", ");
        CharSequence _generateOperator = this.generateOperator(queryParam);
        _builder.append(_generateOperator, "\t\t");
        _builder.append(", ");
        ColumnSource _column_2 = queryParam.getColumn();
        String _name_6 = _column_2.getName();
        String _camelize_2 = Strings.camelize(_name_6);
        _builder.append(_camelize_2, "\t\t");
        _builder.append("QueryParam);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
      }
    }
    return _builder;
  }
  
  public CharSequence createQueryParamVariables(final ContentUriInfo content) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ActionStatement _action = content.getAction();
      EList<ContentUriQueryParam> _params = _action.getParams();
      for(final ContentUriQueryParam queryParam : _params) {
        _builder.newLineIfNotEmpty();
        ColumnSource _column = queryParam.getColumn();
        ColumnType columnType = ModelUtil.getInferredColumnType(_column);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = Objects.equal(columnType, ColumnType.BOOLEAN);
          if (_equals) {
            ColumnSource _column_1 = queryParam.getColumn();
            ColumnType _inferredColumnType = ModelUtil.getInferredColumnType(_column_1);
            String _javaTypeName = ModelUtil.toJavaTypeName(_inferredColumnType);
            _builder.append(_javaTypeName, "");
            _builder.append(" ");
            ColumnSource _column_2 = queryParam.getColumn();
            String _name = _column_2.getName();
            String _camelize = Strings.camelize(_name);
            _builder.append(_camelize, "");
            _builder.append("QueryParam = Uris.getBooleanQueryParamOrDefault(uri, queryKeys, ");
            String _type = content.getType();
            String _pascalize = Strings.pascalize(_type);
            _builder.append(_pascalize, "");
            _builder.append(".");
            ColumnSource _column_3 = queryParam.getColumn();
            String _name_1 = _column_3.getName();
            String _underscore = Strings.underscore(_name_1);
            String _upperCase = _underscore.toUpperCase();
            _builder.append(_upperCase, "");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equals_1 = Objects.equal(columnType, ColumnType.INTEGER);
            if (_equals_1) {
              ColumnSource _column_4 = queryParam.getColumn();
              ColumnType _inferredColumnType_1 = ModelUtil.getInferredColumnType(_column_4);
              String _javaTypeName_1 = ModelUtil.toJavaTypeName(_inferredColumnType_1);
              _builder.append(_javaTypeName_1, "");
              _builder.append(" ");
              ColumnSource _column_5 = queryParam.getColumn();
              String _name_2 = _column_5.getName();
              String _camelize_1 = Strings.camelize(_name_2);
              _builder.append(_camelize_1, "");
              _builder.append("QueryParam = Uris.getIntQueryParamOrDefault(uri, queryKeys, ");
              String _type_1 = content.getType();
              String _pascalize_1 = Strings.pascalize(_type_1);
              _builder.append(_pascalize_1, "");
              _builder.append(".");
              ColumnSource _column_6 = queryParam.getColumn();
              String _name_3 = _column_6.getName();
              String _underscore_1 = Strings.underscore(_name_3);
              String _upperCase_1 = _underscore_1.toUpperCase();
              _builder.append(_upperCase_1, "");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              boolean _equals_2 = Objects.equal(columnType, ColumnType.REAL);
              if (_equals_2) {
                ColumnSource _column_7 = queryParam.getColumn();
                ColumnType _inferredColumnType_2 = ModelUtil.getInferredColumnType(_column_7);
                String _javaTypeName_2 = ModelUtil.toJavaTypeName(_inferredColumnType_2);
                _builder.append(_javaTypeName_2, "");
                _builder.append(" ");
                ColumnSource _column_8 = queryParam.getColumn();
                String _name_4 = _column_8.getName();
                String _camelize_2 = Strings.camelize(_name_4);
                _builder.append(_camelize_2, "");
                _builder.append("QueryParam = Uris.getDoubleQueryParamOrDefault(uri, queryKeys, ");
                String _type_2 = content.getType();
                String _pascalize_2 = Strings.pascalize(_type_2);
                _builder.append(_pascalize_2, "");
                _builder.append(".");
                ColumnSource _column_9 = queryParam.getColumn();
                String _name_5 = _column_9.getName();
                String _underscore_2 = Strings.underscore(_name_5);
                String _upperCase_2 = _underscore_2.toUpperCase();
                _builder.append(_upperCase_2, "");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              } else {
                ColumnSource _column_10 = queryParam.getColumn();
                ColumnType _inferredColumnType_3 = ModelUtil.getInferredColumnType(_column_10);
                String _javaTypeName_3 = ModelUtil.toJavaTypeName(_inferredColumnType_3);
                _builder.append(_javaTypeName_3, "");
                _builder.append(" ");
                ColumnSource _column_11 = queryParam.getColumn();
                String _name_6 = _column_11.getName();
                String _camelize_3 = Strings.camelize(_name_6);
                _builder.append(_camelize_3, "");
                _builder.append("QueryParam = Uris.getStringQueryParamOrDefault(uri, queryKeys, ");
                String _type_3 = content.getType();
                String _pascalize_3 = Strings.pascalize(_type_3);
                _builder.append(_pascalize_3, "");
                _builder.append(".");
                ColumnSource _column_12 = queryParam.getColumn();
                String _name_7 = _column_12.getName();
                String _underscore_3 = Strings.underscore(_name_7);
                String _upperCase_3 = _underscore_3.toUpperCase();
                _builder.append(_upperCase_3, "");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence createSlugVariables(final ContentUriInfo content) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ActionStatement _action = content.getAction();
      ContentUri _uri = _action.getUri();
      EList<ContentUriSegment> _segments = _uri.getSegments();
      Iterable<ContentUriParamSegment> _filter = Iterables.<ContentUriParamSegment>filter(_segments, 
        ContentUriParamSegment.class);
      Iterable<Pair<Integer, ContentUriParamSegment>> _indexed = IterableExtensions.<ContentUriParamSegment>indexed(_filter);
      for(final Pair<Integer, ContentUriParamSegment> entry : _indexed) {
        _builder.newLineIfNotEmpty();
        ContentUriParamSegment _value = entry.getValue();
        ContentUriParamSegment param = ((ContentUriParamSegment) _value);
        _builder.newLineIfNotEmpty();
        {
          ColumnSource _param = param.getParam();
          ColumnType _inferredColumnType = ModelUtil.getInferredColumnType(_param);
          boolean _notEquals = (!Objects.equal(_inferredColumnType, ColumnType.TEXT));
          if (_notEquals) {
            _builder.append("long ");
            ColumnSource _param_1 = param.getParam();
            String _name = _param_1.getName();
            String _camelize = Strings.camelize(_name);
            _builder.append(_camelize, "");
            _builder.append("Slug = Long.parseLong(segments.get(");
            Integer _key = entry.getKey();
            _builder.append(_key, "");
            _builder.append("));");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("String ");
            ColumnSource _param_2 = param.getParam();
            String _name_1 = _param_2.getName();
            String _camelize_1 = Strings.camelize(_name_1);
            _builder.append(_camelize_1, "");
            _builder.append("Slug = segments.get(");
            Integer _key_1 = entry.getKey();
            _builder.append(_key_1, "");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence createStringSlugVariables(final ContentUriInfo content) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ActionStatement _action = content.getAction();
      ContentUri _uri = _action.getUri();
      EList<ContentUriSegment> _segments = _uri.getSegments();
      Iterable<ContentUriParamSegment> _filter = Iterables.<ContentUriParamSegment>filter(_segments, 
        ContentUriParamSegment.class);
      Iterable<Pair<Integer, ContentUriParamSegment>> _indexed = IterableExtensions.<ContentUriParamSegment>indexed(_filter);
      for(final Pair<Integer, ContentUriParamSegment> entry : _indexed) {
        _builder.newLineIfNotEmpty();
        ContentUriParamSegment _value = entry.getValue();
        ContentUriParamSegment param = ((ContentUriParamSegment) _value);
        _builder.newLineIfNotEmpty();
        {
          ActionStatement _action_1 = content.getAction();
          EList<ContentNotificationUri> _notifications = _action_1.getNotifications();
          ColumnSource _param = param.getParam();
          String _name = _param.getName();
          String _camelize = Strings.camelize(_name);
          boolean _hasSegment = this.hasSegment(_notifications, _camelize);
          if (_hasSegment) {
            _builder.append("String ");
            ColumnSource _param_1 = param.getParam();
            String _name_1 = _param_1.getName();
            String _camelize_1 = Strings.camelize(_name_1);
            _builder.append(_camelize_1, "");
            _builder.append("Slug = segments.get(");
            Integer _key = entry.getKey();
            _builder.append(_key, "");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public boolean hasSegment(final EList<ContentNotificationUri> notifications, final String value) {
    final Function1<ContentNotificationUri, Boolean> _function = new Function1<ContentNotificationUri, Boolean>() {
      public Boolean apply(final ContentNotificationUri item) {
        NotifyContentUri _uri = item.getUri();
        EList<NotifyContentUriSegment> _segments = _uri.getSegments();
        final Function1<NotifyContentUriSegment, Boolean> _function = new Function1<NotifyContentUriSegment, Boolean>() {
          public Boolean apply(final NotifyContentUriSegment segment) {
            String _name = segment.getName();
            String _camelize = Strings.camelize(_name);
            return Boolean.valueOf(_camelize.equals(value));
          }
        };
        return Boolean.valueOf(IterableExtensions.<NotifyContentUriSegment>exists(_segments, _function));
      }
    };
    return IterableExtensions.<ContentNotificationUri>exists(notifications, _function);
  }
  
  public CharSequence generateOperator(final ContentUriQueryParam param) {
    boolean _isLike = param.isLike();
    if (_isLike) {
      return "Query.Op.LIKE";
    } else {
      return "Query.Op.EQ";
    }
  }
}
