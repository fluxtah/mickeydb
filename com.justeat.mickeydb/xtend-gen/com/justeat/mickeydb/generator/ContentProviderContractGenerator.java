package com.justeat.mickeydb.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.justeat.mickeydb.ContentUris;
import com.justeat.mickeydb.MickeyDatabaseModel;
import com.justeat.mickeydb.ModelUtil;
import com.justeat.mickeydb.Strings;
import com.justeat.mickeydb.generator.SqliteDatabaseSnapshot;
import com.justeat.mickeydb.mickeyLang.ActionStatement;
import com.justeat.mickeydb.mickeyLang.ColumnDef;
import com.justeat.mickeydb.mickeyLang.ColumnSource;
import com.justeat.mickeydb.mickeyLang.ColumnType;
import com.justeat.mickeydb.mickeyLang.ContentUri;
import com.justeat.mickeydb.mickeyLang.ContentUriParamSegment;
import com.justeat.mickeydb.mickeyLang.ContentUriQueryParam;
import com.justeat.mickeydb.mickeyLang.ContentUriSegment;
import com.justeat.mickeydb.mickeyLang.CreateTableStatement;
import com.justeat.mickeydb.mickeyLang.CreateViewStatement;
import com.justeat.mickeydb.mickeyLang.ResultColumn;
import com.justeat.mickeydb.mickeyLang.TableDefinition;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class ContentProviderContractGenerator {
  public CharSequence generate(final MickeyDatabaseModel model, final ContentUris content) {
    StringConcatenation _builder = new StringConcatenation();
    SqliteDatabaseSnapshot snapshot = model.getSnapshot();
    _builder.newLineIfNotEmpty();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by MickeyDB");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("package ");
    String _packageName = model.getPackageName();
    _builder.append(_packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import android.net.Uri;");
    _builder.newLine();
    _builder.append("import android.provider.BaseColumns;");
    _builder.newLine();
    _builder.append("import com.justeat.mickeydb.AbstractValuesBuilder;");
    _builder.newLine();
    _builder.append("import com.justeat.mickeydb.Mickey;");
    _builder.newLine();
    _builder.append("import com.justeat.mickeydb.MickeyUriBuilder;");
    _builder.newLine();
    _builder.append("import java.lang.reflect.Field;\t\t\t");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.HashSet;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _databaseName = model.getDatabaseName();
    _builder.append(_databaseName, "");
    _builder.append("Contract  {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public static final String CONTENT_AUTHORITY = initAuthority();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String initAuthority() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String authority = \"");
    String _packageName_1 = model.getPackageName();
    _builder.append(_packageName_1, "\t\t");
    _builder.append(".");
    String _databaseName_1 = model.getDatabaseName();
    String _lowerCase = _databaseName_1.toLowerCase();
    _builder.append(_lowerCase, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t  \t\t");
    _builder.newLine();
    _builder.append("\t\t  \t\t");
    _builder.append("ClassLoader loader = ");
    String _databaseName_2 = model.getDatabaseName();
    String _pascalize = Strings.pascalize(_databaseName_2);
    _builder.append(_pascalize, "\t\t  \t\t");
    _builder.append("Contract.class.getClassLoader();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t  \t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Class<?> clz = loader.loadClass(\"");
    String _packageName_2 = model.getPackageName();
    _builder.append(_packageName_2, "\t\t\t");
    _builder.append(".");
    String _databaseName_3 = model.getDatabaseName();
    String _pascalize_1 = Strings.pascalize(_databaseName_3);
    _builder.append(_pascalize_1, "\t\t\t");
    _builder.append("ContentProviderAuthority\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("Field declaredField = clz.getDeclaredField(\"CONTENT_AUTHORITY\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("authority = declaredField.get(null).toString();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ClassNotFoundException | NoSuchFieldException | IllegalArgumentException | IllegalAccessException ignore) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return authority;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("public static final Uri BASE_CONTENT_URI = Uri.parse(\"content://\" + CONTENT_AUTHORITY);");
    _builder.newLine();
    _builder.newLine();
    {
      ArrayList<CreateTableStatement> _tables = snapshot.getTables();
      for(final CreateTableStatement tbl : _tables) {
        _builder.append("\t");
        _builder.append("interface ");
        String _name = tbl.getName();
        String _pascalize_2 = Strings.pascalize(_name);
        _builder.append(_pascalize_2, "\t");
        _builder.append("Columns {");
        _builder.newLineIfNotEmpty();
        {
          EList<ColumnSource> _columnDefs = tbl.getColumnDefs();
          final Function1<ColumnSource, Boolean> _function = new Function1<ColumnSource, Boolean>() {
            public Boolean apply(final ColumnSource it) {
              String _name = it.getName();
              boolean _equals = _name.equals("_id");
              return Boolean.valueOf((!_equals));
            }
          };
          Iterable<ColumnSource> _filter = IterableExtensions.<ColumnSource>filter(_columnDefs, _function);
          for(final ColumnSource col : _filter) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("String ");
            String _name_1 = col.getName();
            String _underscore = Strings.underscore(_name_1);
            String _upperCase = _underscore.toUpperCase();
            _builder.append(_upperCase, "\t\t");
            _builder.append(" = \"");
            String _name_2 = col.getName();
            _builder.append(_name_2, "\t\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      ArrayList<CreateViewStatement> _views = snapshot.getViews();
      for(final CreateViewStatement vw : _views) {
        _builder.append("\t");
        _builder.append("interface ");
        String _name_3 = vw.getName();
        String _pascalize_3 = Strings.pascalize(_name_3);
        _builder.append(_pascalize_3, "\t");
        _builder.append("Columns {");
        _builder.newLineIfNotEmpty();
        {
          ArrayList<ColumnSource> _viewResultColumns = ModelUtil.getViewResultColumns(vw);
          final Function1<ColumnSource, Boolean> _function_1 = new Function1<ColumnSource, Boolean>() {
            public Boolean apply(final ColumnSource it) {
              String _name = it.getName();
              boolean _equals = _name.equals("_id");
              return Boolean.valueOf((!_equals));
            }
          };
          Iterable<ColumnSource> _filter_1 = IterableExtensions.<ColumnSource>filter(_viewResultColumns, _function_1);
          for(final ColumnSource col_1 : _filter_1) {
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _generateInterfaceMemberForResultColumn = this.generateInterfaceMemberForResultColumn(col_1);
            _builder.append(_generateInterfaceMemberForResultColumn, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      for(final CreateTableStatement tbl_1 : model.initTables) {
        _builder.append("\t");
        _builder.append("interface ");
        String _name_4 = tbl_1.getName();
        String _pascalize_4 = Strings.pascalize(_name_4);
        _builder.append(_pascalize_4, "\t");
        _builder.append("Columns {");
        _builder.newLineIfNotEmpty();
        {
          EList<ColumnSource> _columnDefs_1 = tbl_1.getColumnDefs();
          final Function1<ColumnSource, Boolean> _function_2 = new Function1<ColumnSource, Boolean>() {
            public Boolean apply(final ColumnSource it) {
              String _name = it.getName();
              boolean _equals = _name.equals("_id");
              return Boolean.valueOf((!_equals));
            }
          };
          Iterable<ColumnSource> _filter_2 = IterableExtensions.<ColumnSource>filter(_columnDefs_1, _function_2);
          for(final ColumnSource col_2 : _filter_2) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("String ");
            String _name_5 = col_2.getName();
            String _underscore_1 = Strings.underscore(_name_5);
            String _upperCase_1 = _underscore_1.toUpperCase();
            _builder.append(_upperCase_1, "\t\t");
            _builder.append(" = \"");
            String _name_6 = col_2.getName();
            _builder.append(_name_6, "\t\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      for(final CreateViewStatement vw_1 : model.initViews) {
        _builder.append("\t");
        _builder.append("interface ");
        String _name_7 = vw_1.getName();
        String _pascalize_5 = Strings.pascalize(_name_7);
        _builder.append(_pascalize_5, "\t");
        _builder.append("Columns {");
        _builder.newLineIfNotEmpty();
        {
          ArrayList<ColumnSource> _viewResultColumns_1 = ModelUtil.getViewResultColumns(vw_1);
          final Function1<ColumnSource, Boolean> _function_3 = new Function1<ColumnSource, Boolean>() {
            public Boolean apply(final ColumnSource it) {
              String _name = it.getName();
              boolean _equals = _name.equals("_id");
              return Boolean.valueOf((!_equals));
            }
          };
          Iterable<ColumnSource> _filter_3 = IterableExtensions.<ColumnSource>filter(_viewResultColumns_1, _function_3);
          for(final ColumnSource col_3 : _filter_3) {
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _generateInterfaceMemberForResultColumn_1 = this.generateInterfaceMemberForResultColumn(col_3);
            _builder.append(_generateInterfaceMemberForResultColumn_1, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      ArrayList<CreateTableStatement> _tables_1 = snapshot.getTables();
      for(final CreateTableStatement tbl_2 : _tables_1) {
        _builder.append("\t");
        CharSequence _generateContractItem = this.generateContractItem(model, snapshot, tbl_2, content);
        _builder.append(_generateContractItem, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      ArrayList<CreateViewStatement> _views_1 = snapshot.getViews();
      for(final CreateViewStatement vw_2 : _views_1) {
        _builder.append("\t");
        CharSequence _generateContractItem_1 = this.generateContractItem(model, snapshot, vw_2, content);
        _builder.append(_generateContractItem_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      for(final CreateTableStatement tbl_3 : model.initTables) {
        _builder.append("\t");
        CharSequence _generateContractItem_2 = this.generateContractItem(model, snapshot, tbl_3, content);
        _builder.append(_generateContractItem_2, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      for(final CreateViewStatement vw_3 : model.initViews) {
        _builder.append("\t");
        CharSequence _generateContractItem_3 = this.generateContractItem(model, snapshot, vw_3, content);
        _builder.append(_generateContractItem_3, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final Map<Uri, Set<Uri>> REFERENCING_VIEWS;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<Uri, Set<Uri>> map = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      ArrayList<CreateTableStatement> _tables_2 = snapshot.getTables();
      for(final CreateTableStatement tbl_4 : _tables_2) {
        _builder.append("\t\t");
        _builder.append("map.put(");
        String _name_8 = tbl_4.getName();
        String _pascalize_6 = Strings.pascalize(_name_8);
        _builder.append(_pascalize_6, "\t\t");
        _builder.append(".CONTENT_URI, ");
        String _name_9 = tbl_4.getName();
        String _pascalize_7 = Strings.pascalize(_name_9);
        _builder.append(_pascalize_7, "\t\t");
        _builder.append(".VIEW_URIS);");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ArrayList<CreateViewStatement> _views_2 = snapshot.getViews();
      for(final CreateViewStatement vw_4 : _views_2) {
        _builder.append("\t\t");
        _builder.append("map.put(");
        String _name_10 = vw_4.getName();
        String _pascalize_8 = Strings.pascalize(_name_10);
        _builder.append(_pascalize_8, "\t\t");
        _builder.append(".CONTENT_URI, ");
        String _name_11 = vw_4.getName();
        String _pascalize_9 = Strings.pascalize(_name_11);
        _builder.append(_pascalize_9, "\t\t");
        _builder.append(".VIEW_URIS);");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      for(final CreateTableStatement tbl_5 : model.initTables) {
        _builder.append("\t\t");
        _builder.append("map.put(");
        String _name_12 = tbl_5.getName();
        String _pascalize_10 = Strings.pascalize(_name_12);
        _builder.append(_pascalize_10, "\t\t");
        _builder.append(".CONTENT_URI, ");
        String _name_13 = tbl_5.getName();
        String _pascalize_11 = Strings.pascalize(_name_13);
        _builder.append(_pascalize_11, "\t\t");
        _builder.append(".VIEW_URIS);");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      for(final CreateViewStatement vw_5 : model.initViews) {
        _builder.append("\t\t");
        _builder.append("map.put(");
        String _name_14 = vw_5.getName();
        String _pascalize_12 = Strings.pascalize(_name_14);
        _builder.append(_pascalize_12, "\t\t");
        _builder.append(".CONTENT_URI, ");
        String _name_15 = vw_5.getName();
        String _pascalize_13 = Strings.pascalize(_name_15);
        _builder.append(_pascalize_13, "\t\t");
        _builder.append(".VIEW_URIS);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("REFERENCING_VIEWS = Collections.unmodifiableMap(map);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _databaseName_4 = model.getDatabaseName();
    String _pascalize_14 = Strings.pascalize(_databaseName_4);
    _builder.append(_pascalize_14, "\t");
    _builder.append("Contract(){}");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>Delete all rows from all tables</p>");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void deleteAll() {");
    _builder.newLine();
    {
      ArrayList<CreateTableStatement> _tables_3 = snapshot.getTables();
      for(final CreateTableStatement tbl_6 : _tables_3) {
        _builder.append("\t\t");
        String _name_16 = tbl_6.getName();
        String _pascalize_15 = Strings.pascalize(_name_16);
        _builder.append(_pascalize_15, "\t\t");
        _builder.append(".delete();");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      for(final CreateTableStatement tbl_7 : model.initTables) {
        _builder.append("\t\t");
        String _name_17 = tbl_7.getName();
        String _pascalize_16 = Strings.pascalize(_name_17);
        _builder.append(_pascalize_16, "\t\t");
        _builder.append(".delete();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence createActionUriBuilder(final ActionStatement action) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Create a new URI for ");
    ContentUri _uri = action.getUri();
    String _asString = this.asString(_uri);
    _builder.append(_asString, " ");
    _builder.newLineIfNotEmpty();
    {
      EList<ContentUriQueryParam> _params = action.getParams();
      boolean _isEmpty = _params.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _builder.append(" ");
        _builder.append("* <b>Query Params:</b>");
        _builder.newLine();
        {
          EList<ContentUriQueryParam> _params_1 = action.getParams();
          for(final ContentUriQueryParam param : _params_1) {
            _builder.append(" ");
            _builder.append("* ");
            ColumnSource _column = param.getColumn();
            String _name = _column.getName();
            _builder.append(_name, " ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public static class ");
    String _name_1 = action.getName();
    String _pascalize = Strings.pascalize(_name_1);
    _builder.append(_pascalize, "");
    _builder.append("UriBuilder extends MickeyUriBuilder {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public ");
    String _name_2 = action.getName();
    String _pascalize_1 = Strings.pascalize(_name_2);
    _builder.append(_pascalize_1, "\t");
    _builder.append("UriBuilder(");
    ContentUri _uri_1 = action.getUri();
    String _methodArgsSig = this.toMethodArgsSig(_uri_1);
    _builder.append(_methodArgsSig, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(BASE_CONTENT_URI.buildUpon());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getUriBuilder()");
    _builder.newLine();
    {
      ContentUri _uri_2 = action.getUri();
      EList<ContentUriSegment> _segments = _uri_2.getSegments();
      for(final ContentUriSegment seg : _segments) {
        {
          if ((seg instanceof ContentUriParamSegment)) {
            {
              ColumnSource _param = ((ContentUriParamSegment) seg).getParam();
              ColumnType _inferredColumnType = ModelUtil.getInferredColumnType(_param);
              boolean _notEquals = (!Objects.equal(_inferredColumnType, ColumnType.TEXT));
              if (_notEquals) {
                _builder.append("\t\t");
                _builder.append(".appendPath(String.valueOf(");
                ColumnSource _param_1 = ((ContentUriParamSegment)seg).getParam();
                String _name_3 = _param_1.getName();
                String _camelize = Strings.camelize(_name_3);
                _builder.append(_camelize, "\t\t");
                _builder.append("))");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t\t");
                _builder.append(".appendPath(");
                ColumnSource _param_2 = ((ContentUriParamSegment)seg).getParam();
                String _name_4 = _param_2.getName();
                String _camelize_1 = Strings.camelize(_name_4);
                _builder.append(_camelize_1, "\t\t");
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            _builder.append("\t\t");
            _builder.append(".appendPath(\"");
            String _name_5 = seg.getName();
            _builder.append(_name_5, "\t\t");
            _builder.append("\")");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t\t\t");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<ContentUriQueryParam> _params_2 = action.getParams();
      for(final ContentUriQueryParam queryParam : _params_2) {
        _builder.append("\t");
        _builder.append("public ");
        String _name_6 = action.getName();
        String _pascalize_2 = Strings.pascalize(_name_6);
        _builder.append(_pascalize_2, "\t");
        _builder.append("UriBuilder set");
        ColumnSource _column_1 = queryParam.getColumn();
        String _name_7 = _column_1.getName();
        String _pascalize_3 = Strings.pascalize(_name_7);
        _builder.append(_pascalize_3, "\t");
        _builder.append("Param(");
        ColumnSource _column_2 = queryParam.getColumn();
        ColumnType _inferredColumnType_1 = ModelUtil.getInferredColumnType(_column_2);
        String _javaTypeName = ModelUtil.toJavaTypeName(_inferredColumnType_1);
        _builder.append(_javaTypeName, "\t");
        _builder.append(" value) {");
        _builder.newLineIfNotEmpty();
        {
          ColumnSource _column_3 = queryParam.getColumn();
          ColumnType _inferredColumnType_2 = ModelUtil.getInferredColumnType(_column_3);
          boolean _equals = Objects.equal(_inferredColumnType_2, ColumnType.TEXT);
          if (_equals) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("getUriBuilder().appendQueryParameter(");
            TableDefinition _type = action.getType();
            String _name_8 = _type.getName();
            String _pascalize_4 = Strings.pascalize(_name_8);
            _builder.append(_pascalize_4, "\t\t");
            _builder.append(".");
            ColumnSource _column_4 = queryParam.getColumn();
            String _name_9 = _column_4.getName();
            String _underscore = Strings.underscore(_name_9);
            String _upperCase = _underscore.toUpperCase();
            _builder.append(_upperCase, "\t\t");
            _builder.append(", value);");
            _builder.newLineIfNotEmpty();
          } else {
            ColumnSource _column_5 = queryParam.getColumn();
            ColumnType _inferredColumnType_3 = ModelUtil.getInferredColumnType(_column_5);
            boolean _equals_1 = Objects.equal(_inferredColumnType_3, ColumnType.BOOLEAN);
            if (_equals_1) {
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("getUriBuilder().appendQueryParameter(");
              TableDefinition _type_1 = action.getType();
              String _name_10 = _type_1.getName();
              String _pascalize_5 = Strings.pascalize(_name_10);
              _builder.append(_pascalize_5, "\t\t");
              _builder.append(".");
              ColumnSource _column_6 = queryParam.getColumn();
              String _name_11 = _column_6.getName();
              String _underscore_1 = Strings.underscore(_name_11);
              String _upperCase_1 = _underscore_1.toUpperCase();
              _builder.append(_upperCase_1, "\t\t");
              _builder.append(", value ? \"1\" : \"0\");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("getUriBuilder().appendQueryParameter(");
              TableDefinition _type_2 = action.getType();
              String _name_12 = _type_2.getName();
              String _pascalize_6 = Strings.pascalize(_name_12);
              _builder.append(_pascalize_6, "\t\t");
              _builder.append(".");
              ColumnSource _column_7 = queryParam.getColumn();
              String _name_13 = _column_7.getName();
              String _underscore_2 = Strings.underscore(_name_13);
              String _upperCase_2 = _underscore_2.toUpperCase();
              _builder.append(_upperCase_2, "\t\t");
              _builder.append(", String.valueOf(value));");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return this;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Create a new URI for ");
    ContentUri _uri_3 = action.getUri();
    String _asString_1 = this.asString(_uri_3);
    _builder.append(_asString_1, " ");
    _builder.newLineIfNotEmpty();
    {
      EList<ContentUriQueryParam> _params_3 = action.getParams();
      boolean _isEmpty_1 = _params_3.isEmpty();
      boolean _not_1 = (!_isEmpty_1);
      if (_not_1) {
        _builder.append(" ");
        _builder.append("* <b>Query Params:</b>");
        _builder.newLine();
        {
          EList<ContentUriQueryParam> _params_4 = action.getParams();
          for(final ContentUriQueryParam param_1 : _params_4) {
            _builder.append(" ");
            _builder.append("* ");
            ColumnSource _column_8 = param_1.getColumn();
            String _name_14 = _column_8.getName();
            _builder.append(_name_14, " ");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public static ");
    String _name_15 = action.getName();
    String _pascalize_7 = Strings.pascalize(_name_15);
    _builder.append(_pascalize_7, "");
    _builder.append("UriBuilder new");
    String _name_16 = action.getName();
    String _pascalize_8 = Strings.pascalize(_name_16);
    _builder.append(_pascalize_8, "");
    _builder.append("UriBuilder(");
    ContentUri _uri_4 = action.getUri();
    String _methodArgsSig_1 = this.toMethodArgsSig(_uri_4);
    _builder.append(_methodArgsSig_1, "");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return new ");
    String _name_17 = action.getName();
    String _pascalize_9 = Strings.pascalize(_name_17);
    _builder.append(_pascalize_9, "\t");
    _builder.append("UriBuilder(");
    ContentUri _uri_5 = action.getUri();
    String _methodArgs = this.toMethodArgs(_uri_5);
    _builder.append(_methodArgs, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String asString(final ContentUri uri) {
    StringBuilder builder = new StringBuilder();
    EList<ContentUriSegment> _segments = uri.getSegments();
    for (final ContentUriSegment seg : _segments) {
      {
        builder.append("/");
        if ((seg instanceof ContentUriParamSegment)) {
          ContentUriParamSegment param = ((ContentUriParamSegment) seg);
          StringBuilder _append = builder.append("{");
          ColumnSource _param = param.getParam();
          String _name = _param.getName();
          StringBuilder _append_1 = _append.append(_name);
          _append_1.append("}");
        } else {
          String _name_1 = seg.getName();
          builder.append(_name_1);
        }
      }
    }
    return builder.toString();
  }
  
  /**
   * Find all actions associated to the given definition,
   * actions are associated to the definition via the first
   * part of an action uri, for instance /recipes/a/b/c is
   * associated to recipes
   */
  public Iterable<ActionStatement> findActionsForDefinition(final MickeyDatabaseModel model, final String defName) {
    final Function1<ActionStatement, Boolean> _function = new Function1<ActionStatement, Boolean>() {
      public Boolean apply(final ActionStatement action) {
        TableDefinition _type = action.getType();
        String _name = _type.getName();
        return Boolean.valueOf(_name.equals(defName));
      }
    };
    return IterableExtensions.<ActionStatement>filter(model.actions, _function);
  }
  
  public String toMethodArgsSig(final ContentUri uri) {
    EList<ContentUriSegment> _segments = uri.getSegments();
    Iterable<ContentUriParamSegment> _filter = Iterables.<ContentUriParamSegment>filter(_segments, ContentUriParamSegment.class);
    final Function1<ContentUriParamSegment, CharSequence> _function = new Function1<ContentUriParamSegment, CharSequence>() {
      public CharSequence apply(final ContentUriParamSegment seg) {
        ColumnSource _param = seg.getParam();
        ColumnType _inferredColumnType = ModelUtil.getInferredColumnType(_param);
        boolean _notEquals = (!Objects.equal(_inferredColumnType, ColumnType.TEXT));
        if (_notEquals) {
          ColumnSource _param_1 = seg.getParam();
          String _name = _param_1.getName();
          String _camelize = Strings.camelize(_name);
          return ("long " + _camelize);
        } else {
          ColumnSource _param_2 = seg.getParam();
          String _name_1 = _param_2.getName();
          String _camelize_1 = Strings.camelize(_name_1);
          return ("String " + _camelize_1);
        }
      }
    };
    return IterableExtensions.<ContentUriParamSegment>join(_filter, ", ", _function);
  }
  
  public String toMethodArgs(final ContentUri uri) {
    EList<ContentUriSegment> _segments = uri.getSegments();
    Iterable<ContentUriParamSegment> _filter = Iterables.<ContentUriParamSegment>filter(_segments, ContentUriParamSegment.class);
    final Function1<ContentUriParamSegment, CharSequence> _function = new Function1<ContentUriParamSegment, CharSequence>() {
      public CharSequence apply(final ContentUriParamSegment seg) {
        ColumnSource _param = seg.getParam();
        ColumnType _inferredColumnType = ModelUtil.getInferredColumnType(_param);
        boolean _notEquals = (!Objects.equal(_inferredColumnType, ColumnType.TEXT));
        if (_notEquals) {
          ColumnSource _param_1 = seg.getParam();
          String _name = _param_1.getName();
          return Strings.camelize(_name);
        } else {
          ColumnSource _param_2 = seg.getParam();
          String _name_1 = _param_2.getName();
          return Strings.camelize(_name_1);
        }
      }
    };
    return IterableExtensions.<ContentUriParamSegment>join(_filter, ", ", _function);
  }
  
  public boolean hasMethodArgs(final ContentUri uri) {
    EList<ContentUriSegment> _segments = uri.getSegments();
    Iterable<ContentUriParamSegment> _filter = Iterables.<ContentUriParamSegment>filter(_segments, ContentUriParamSegment.class);
    int _size = IterableExtensions.size(_filter);
    return (_size > 0);
  }
  
  public CharSequence generateContractItem(final MickeyDatabaseModel model, final SqliteDatabaseSnapshot snapshot, final TableDefinition stmt, final ContentUris content) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* <p>Column definitions and helper methods to work with the ");
    String _name = stmt.getName();
    String _pascalize = Strings.pascalize(_name);
    _builder.append(_pascalize, " ");
    _builder.append(".</p>");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public static class ");
    String _name_1 = stmt.getName();
    String _pascalize_1 = Strings.pascalize(_name_1);
    _builder.append(_pascalize_1, "");
    _builder.append(" implements ");
    String _name_2 = stmt.getName();
    String _pascalize_2 = Strings.pascalize(_name_2);
    _builder.append(_pascalize_2, "");
    _builder.append("Columns");
    {
      boolean _hasAndroidPrimaryKey = this.hasAndroidPrimaryKey(stmt);
      if (_hasAndroidPrimaryKey) {
        _builder.append(", BaseColumns");
      }
    }
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("public static final Uri CONTENT_URI = ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BASE_CONTENT_URI.buildUpon().appendPath(\"");
    String _name_3 = stmt.getName();
    _builder.append(_name_3, "\t\t\t");
    _builder.append("\").build();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>The content type for a cursor that contains many ");
    String _name_4 = stmt.getName();
    String _pascalize_3 = Strings.pascalize(_name_4);
    _builder.append(_pascalize_3, "\t ");
    _builder.append(" rows.</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("static final String CONTENT_TYPE =");
    _builder.newLine();
    _builder.append("\t           ");
    _builder.append("\"vnd.android.cursor.dir/vnd.");
    String _databaseName = model.getDatabaseName();
    String _lowerCase = _databaseName.toLowerCase();
    _builder.append(_lowerCase, "\t           ");
    _builder.append(".");
    String _name_5 = stmt.getName();
    _builder.append(_name_5, "\t           ");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>The content type for a cursor that contains a single ");
    String _name_6 = stmt.getName();
    String _pascalize_4 = Strings.pascalize(_name_6);
    _builder.append(_pascalize_4, "\t ");
    _builder.append(" row.</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String ITEM_CONTENT_TYPE =");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"vnd.android.cursor.item/vnd.");
    String _databaseName_1 = model.getDatabaseName();
    String _lowerCase_1 = _databaseName_1.toLowerCase();
    _builder.append(_lowerCase_1, "\t\t");
    _builder.append(".");
    String _name_7 = stmt.getName();
    _builder.append(_name_7, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>Builds a Uri with appended id for a row in ");
    String _name_8 = stmt.getName();
    String _pascalize_5 = Strings.pascalize(_name_8);
    _builder.append(_pascalize_5, "\t ");
    _builder.append(", ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("* eg:- ");
    String _name_9 = stmt.getName();
    String _lowerCase_2 = _name_9.toLowerCase();
    _builder.append(_lowerCase_2, "\t ");
    _builder.append("/123.</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("public static Uri buildUriWithId(long id) {");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("return CONTENT_URI.buildUpon().appendPath(String.valueOf(id)).build();");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t   ");
    String _name_10 = stmt.getName();
    Iterable<ActionStatement> actions = this.findActionsForDefinition(model, _name_10);
    _builder.newLineIfNotEmpty();
    {
      boolean _notEquals = (!Objects.equal(actions, null));
      if (_notEquals) {
        {
          for(final ActionStatement action : actions) {
            _builder.append("\t");
            CharSequence _createActionUriBuilder = this.createActionUriBuilder(action);
            _builder.append(_createActionUriBuilder, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("public static int delete() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Mickey.getContentResolver().delete(");
    String _name_11 = stmt.getName();
    String _pascalize_6 = Strings.pascalize(_name_11);
    _builder.append(_pascalize_6, "\t\t");
    _builder.append(".CONTENT_URI, null, null);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static int delete(String where, String[] selectionArgs) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Mickey.getContentResolver().delete(");
    String _name_12 = stmt.getName();
    String _pascalize_7 = Strings.pascalize(_name_12);
    _builder.append(_pascalize_7, "\t\t");
    _builder.append(".CONTENT_URI, where, selectionArgs);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>Create a new Builder for ");
    String _name_13 = stmt.getName();
    String _pascalize_8 = Strings.pascalize(_name_13);
    _builder.append(_pascalize_8, "\t ");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Builder newBuilder() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new Builder();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>Create a new Builder for ");
    String _name_14 = stmt.getName();
    String _pascalize_9 = Strings.pascalize(_name_14);
    _builder.append(_pascalize_9, "\t ");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Builder newBuilder(Uri contentUri) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new Builder(contentUri);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>Build and execute insert or update statements for ");
    String _name_15 = stmt.getName();
    String _pascalize_10 = Strings.pascalize(_name_15);
    _builder.append(_pascalize_10, "\t ");
    _builder.append(".</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>Use {@link ");
    String _name_16 = stmt.getName();
    String _pascalize_11 = Strings.pascalize(_name_16);
    _builder.append(_pascalize_11, "\t ");
    _builder.append("#newBuilder()} to create new builder</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static class Builder extends AbstractValuesBuilder {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private Builder(Uri contentUri) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super(Mickey.getApplicationContext(), contentUri);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private Builder() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("super(Mickey.getApplicationContext(), ");
    String _name_17 = stmt.getName();
    String _pascalize_12 = Strings.pascalize(_name_17);
    _builder.append(_pascalize_12, "\t\t\t");
    _builder.append(".CONTENT_URI);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _generateBuilderSetters = this.generateBuilderSetters(stmt);
    _builder.append(_generateBuilderSetters, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final Set<Uri> VIEW_URIS;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Set<Uri> viewUris =  new HashSet<>();");
    _builder.newLine();
    _builder.append("\t\t");
    HashSet<CreateViewStatement> _allViewsReferencingTable = ModelUtil.getAllViewsReferencingTable(snapshot, stmt);
    final Function1<CreateViewStatement, String> _function = new Function1<CreateViewStatement, String>() {
      public String apply(final CreateViewStatement x) {
        return x.getName();
      }
    };
    List<CreateViewStatement> views = IterableExtensions.<CreateViewStatement, String>sortBy(_allViewsReferencingTable, _function);
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    HashSet<CreateViewStatement> _allViewsInConfigInitReferencingTable = ModelUtil.getAllViewsInConfigInitReferencingTable(model, stmt);
    final Function1<CreateViewStatement, String> _function_1 = new Function1<CreateViewStatement, String>() {
      public String apply(final CreateViewStatement x) {
        return x.getName();
      }
    };
    List<CreateViewStatement> initViews = IterableExtensions.<CreateViewStatement, String>sortBy(_allViewsInConfigInitReferencingTable, _function_1);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      for(final CreateViewStatement ref : views) {
        _builder.append("\t\t");
        _builder.append("viewUris.add(");
        String _name_18 = ref.getName();
        String _pascalize_13 = Strings.pascalize(_name_18);
        _builder.append(_pascalize_13, "\t\t");
        _builder.append(".CONTENT_URI);");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      for(final CreateViewStatement ref_1 : initViews) {
        _builder.append("\t\t");
        _builder.append("viewUris.add(");
        String _name_19 = ref_1.getName();
        String _pascalize_14 = Strings.pascalize(_name_19);
        _builder.append(_pascalize_14, "\t\t");
        _builder.append(".CONTENT_URI);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("VIEW_URIS = Collections.unmodifiableSet(viewUris);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generateBuilderSetters(final CreateTableStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ColumnSource> _columnDefs = stmt.getColumnDefs();
      final Function1<ColumnSource, Boolean> _function = new Function1<ColumnSource, Boolean>() {
        public Boolean apply(final ColumnSource it) {
          String _name = it.getName();
          boolean _equals = _name.equals("_id");
          return Boolean.valueOf((!_equals));
        }
      };
      Iterable<ColumnSource> _filter = IterableExtensions.<ColumnSource>filter(_columnDefs, _function);
      for(final ColumnSource item : _filter) {
        ColumnDef col = ((ColumnDef) item);
        _builder.newLineIfNotEmpty();
        _builder.append("public Builder set");
        String _name = col.getName();
        String _pascalize = Strings.pascalize(_name);
        _builder.append(_pascalize, "");
        _builder.append("(");
        ColumnType _type = col.getType();
        String _javaTypeName = ModelUtil.toJavaTypeName(_type);
        _builder.append(_javaTypeName, "");
        _builder.append(" value) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("mValues.put(");
        String _name_1 = stmt.getName();
        String _pascalize_1 = Strings.pascalize(_name_1);
        _builder.append(_pascalize_1, "\t");
        _builder.append(".");
        String _name_2 = col.getName();
        String _underscore = Strings.underscore(_name_2);
        String _upperCase = _underscore.toUpperCase();
        _builder.append(_upperCase, "\t");
        _builder.append(", value);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return this;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  protected CharSequence _generateBuilderSetters(final CreateViewStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    ArrayList<ColumnSource> cols = ModelUtil.getViewResultColumns(stmt);
    _builder.newLineIfNotEmpty();
    {
      final Function1<ColumnSource, Boolean> _function = new Function1<ColumnSource, Boolean>() {
        public Boolean apply(final ColumnSource it) {
          String _name = it.getName();
          boolean _equals = _name.equals("_id");
          return Boolean.valueOf((!_equals));
        }
      };
      Iterable<ColumnSource> _filter = IterableExtensions.<ColumnSource>filter(cols, _function);
      for(final ColumnSource item : _filter) {
        ResultColumn col = ((ResultColumn) item);
        _builder.newLineIfNotEmpty();
        ColumnType type = ModelUtil.getInferredColumnType(col);
        _builder.newLineIfNotEmpty();
        _builder.append("public Builder set");
        String _name = col.getName();
        String _pascalize = Strings.pascalize(_name);
        _builder.append(_pascalize, "");
        _builder.append("(");
        String _javaTypeName = ModelUtil.toJavaTypeName(type);
        _builder.append(_javaTypeName, "");
        _builder.append(" value) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("mValues.put(");
        String _name_1 = stmt.getName();
        String _pascalize_1 = Strings.pascalize(_name_1);
        _builder.append(_pascalize_1, "\t");
        _builder.append(".");
        String _name_2 = col.getName();
        String _underscore = Strings.underscore(_name_2);
        String _upperCase = _underscore.toUpperCase();
        _builder.append(_upperCase, "\t");
        _builder.append(", value);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return this;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  protected String _getName(final CreateTableStatement stmt) {
    return stmt.getName();
  }
  
  protected String _getName(final CreateViewStatement stmt) {
    return stmt.getName();
  }
  
  protected boolean _hasAndroidPrimaryKey(final CreateTableStatement stmt) {
    return ModelUtil.hasAndroidPrimaryKey(stmt);
  }
  
  protected boolean _hasAndroidPrimaryKey(final CreateViewStatement stmt) {
    return ModelUtil.hasAndroidPrimaryKey(stmt);
  }
  
  public CharSequence createMethodArgsFromColumns(final CreateTableStatement tbl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ColumnSource> _columnDefs = tbl.getColumnDefs();
      final Function1<ColumnSource, Boolean> _function = new Function1<ColumnSource, Boolean>() {
        public Boolean apply(final ColumnSource it) {
          String _name = it.getName();
          boolean _equals = _name.equals("_id");
          return Boolean.valueOf((!_equals));
        }
      };
      Iterable<ColumnSource> _filter = IterableExtensions.<ColumnSource>filter(_columnDefs, _function);
      boolean _hasElements = false;
      for(final ColumnSource item : _filter) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        ColumnDef col = ((ColumnDef) item);
        ColumnType _type = col.getType();
        String _javaTypeName = ModelUtil.toJavaTypeName(_type);
        _builder.append(_javaTypeName, "");
        _builder.append(" ");
        String _name = col.getName();
        String _camelize = Strings.camelize(_name);
        _builder.append(_camelize, "");
      }
    }
    return _builder;
  }
  
  public CharSequence generateInterfaceMemberForResultColumn(final ColumnSource expr) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _and = false;
      boolean _and_1 = false;
      String _name = expr.getName();
      boolean _notEquals = (!Objects.equal(_name, null));
      if (!_notEquals) {
        _and_1 = false;
      } else {
        String _name_1 = expr.getName();
        boolean _equals = _name_1.equals("");
        boolean _not = (!_equals);
        _and_1 = _not;
      }
      if (!_and_1) {
        _and = false;
      } else {
        String _name_2 = expr.getName();
        boolean _equals_1 = _name_2.equals("_id");
        boolean _not_1 = (!_equals_1);
        _and = _not_1;
      }
      if (_and) {
        _builder.append("String ");
        String _name_3 = expr.getName();
        String _underscore = Strings.underscore(_name_3);
        String _upperCase = _underscore.toUpperCase();
        _builder.append(_upperCase, "");
        _builder.append(" = \"");
        String _name_4 = expr.getName();
        _builder.append(_name_4, "");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence generateBuilderSetters(final TableDefinition stmt) {
    if (stmt instanceof CreateTableStatement) {
      return _generateBuilderSetters((CreateTableStatement)stmt);
    } else if (stmt instanceof CreateViewStatement) {
      return _generateBuilderSetters((CreateViewStatement)stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
  
  public String getName(final TableDefinition stmt) {
    if (stmt instanceof CreateTableStatement) {
      return _getName((CreateTableStatement)stmt);
    } else if (stmt instanceof CreateViewStatement) {
      return _getName((CreateViewStatement)stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
  
  public boolean hasAndroidPrimaryKey(final TableDefinition stmt) {
    if (stmt instanceof CreateTableStatement) {
      return _hasAndroidPrimaryKey((CreateTableStatement)stmt);
    } else if (stmt instanceof CreateViewStatement) {
      return _hasAndroidPrimaryKey((CreateViewStatement)stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
}
